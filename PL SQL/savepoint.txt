-- Create a sample table
CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50),
    emp_salary INT
);

-- Inserting Records
INSERT INTO employees (emp_id, emp_name, emp_salary)
VALUES
    (1, 'Alice', 50000),
    (2, 'Bob', 60000),
    (3, 'Charlie', 75000);

-- Display all records
SELECT * FROM employees;

-- Start a transaction (Note: This might be implicit, and you may not need to explicitly start a transaction)

-- Updating Records
UPDATE employees
SET emp_salary = emp_salary + 10000
WHERE emp_id = 1;

-- Deleting Records
DELETE FROM employees
WHERE emp_id = 2;

-- Display updated records within the transaction
SELECT * FROM employees;

-- Commit the transaction
COMMIT;

-- Display records after committing
SELECT * FROM employees;

-- Start a new transaction (Note: This might be implicit)

-- Inserting records with a subquery using the IN clause
INSERT INTO employees (emp_id, emp_name, emp_salary)
VALUES
    (4, 'David', 80000),
    (5, 'Eva', 90000)
WHERE emp_id IN (SELECT emp_id FROM employees WHERE emp_salary > 60000);

-- Display records within the transaction
SELECT * FROM employees;

-- Savepoint
SAVEPOINT before_update;

-- Updating records with a subquery using the EXISTS clause
UPDATE employees
SET emp_salary = emp_salary - 5000
WHERE EXISTS (
    SELECT 1
    FROM employees
    WHERE emp_id = 4
);

-- Display updated records within the transaction
SELECT * FROM employees;

-- Rollback to the savepoint
ROLLBACK TO before_update;

-- Display records after rolling back to the savepoint
SELECT * FROM employees;

-- Commit the transaction
COMMIT;
